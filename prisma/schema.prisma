// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  password      String

  Request         Request[] @relation("approverRelation")
  createdRequests Request[] @relation("creatorRelation")
  updatedRequests Request[] @relation("updaterRelation")

  userLeaderUser       userLeader[]   @relation("userLeaderUser")
  userLeaderLeader     userLeader[]   @relation("userLeaderLeader")
  userDirectorUser     userDirector[] @relation("userDirectorUser")
  userDirectorDirector userDirector[] @relation("userDirectorDirector")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//todo: remove approverId
model Request {
  id              Int              @id @default(autoincrement())
  effectDate      DateTime
  description     String
  minutes         Int
  approverId      String
  status          Int
  createdAt       DateTime         @default(now())
  createdById     String
  updatedAt       DateTime?        @updatedAt
  updatedById     String?
  approver        User             @relation("approverRelation", fields: [approverId], references: [id])
  creator         User             @relation("creatorRelation", fields: [createdById], references: [id])
  updater         User?            @relation("updaterRelation", fields: [updatedById], references: [id])
  WorkflowRequest WorkflowRequest?
}

model Workflow {
  id          Int       @id @default(autoincrement())
  json        Json
  description String?
  createdAt   DateTime  @default(now())
  createdById String
  updatedAt   DateTime? @updatedAt
  updatedById String?
}

model WorkflowRequest {
  id          Int       @id @default(autoincrement())
  json        Json
  status      Int
  requestId   Int       @unique
  createdAt   DateTime  @default(now())
  createdById String
  updatedAt   DateTime? @updatedAt
  updatedById String?
  request     Request   @relation(fields: [requestId], references: [id])
}

model userLeader {
  id       Int    @id @default(autoincrement())
  userId   String
  leaderId String
  user     User   @relation("userLeaderUser", fields: [userId], references: [id])
  leader   User   @relation("userLeaderLeader", fields: [leaderId], references: [id])
}

model userDirector {
  id         Int    @id @default(autoincrement())
  userId     String
  directorId String
  user       User   @relation("userDirectorUser", fields: [userId], references: [id])
  director   User   @relation("userDirectorDirector", fields: [directorId], references: [id])
}
